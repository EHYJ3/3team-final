<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.javalab.board.repository.JobPostMapper">

    <insert id="insertJobPost" parameterType="com.javalab.board.vo.JobPostVo">
        <selectKey keyProperty="jobPostId" resultType="long" order="BEFORE">
            SELECT JOBPOST_SEQ.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO JOBPOST (
        jobPost_id, title, content, education, experience, position, address, salary, end_date, hit_no, created, comp_id, logo_path, logo_name
        ) VALUES (
        #{jobPostId}, #{title}, #{content}, #{education}, #{experience}, #{position}, #{address, jdbcType=VARCHAR}, #{salary, jdbcType=VARCHAR}, #{endDate}, 0, SYSDATE, #{compId}, #{logoPath}, #{logoName}
        )
    </insert>




    <select id="getJobPostById" resultType="com.javalab.board.vo.JobPostVo">
        SELECT * FROM jobPost WHERE jobPost_id = #{jobPostId}
    </select>

    <select id="getAllJobPosts" resultType="com.javalab.board.vo.JobPostVo">
        SELECT * FROM jobPost
        ORDER BY created DESC
    </select>

    <select id="selectJobPostsByCompany" parameterType="String" resultType="com.javalab.board.vo.JobPostVo">
        SELECT * FROM jobPost
        WHERE comp_id = #{compId}
        ORDER BY created DESC
    </select>

    <update id="updatePaymentStatus">
        UPDATE jobPost
        SET payment_status = #{paymentStatus}
        WHERE jobPost_id = #{jobPostId}
    </update>

    <select id="findJobPostById" parameterType="long" resultType="com.javalab.board.vo.JobPostVo">
        SELECT * FROM jobPost
        WHERE jobPost_id = #{jobPostId}
    </select>

    <select id="getScrapList" parameterType="string"
            resultType="com.javalab.board.vo.JobPostVo">
        SELECT j.jobPost_id, j.title, j.created, k.jobSeeker_id
        FROM jobSeekerScrap s
        JOIN jobPost j ON s.jobPost_id = j.jobPost_id
        JOIN jobSeeker k ON s.jobSeeker_id = k.jobSeeker_id
        WHERE s.jobSeeker_id = #{jobSeekerId}

    </select>

    <!-- jobPostId로 공고 정보 가져오기 -->
    <select id="getJobPostDetailsById" resultType="com.javalab.board.vo.JobPostVo">
        SELECT title, salary, address, end_date
        FROM jobPost
        WHERE jobPost_id = #{jobPostId}
    </select>

    <update id="updateJobPost" parameterType="com.javalab.board.vo.JobPostVo">
        UPDATE jobPost
        SET title = #{title, jdbcType=VARCHAR},
        content = #{content, jdbcType=VARCHAR},
        position = #{position, jdbcType=VARCHAR},
        salary = #{salary, jdbcType=VARCHAR},
        experience = #{experience, jdbcType=VARCHAR},
        education = #{education, jdbcType=VARCHAR},
        address = #{address, jdbcType=VARCHAR},
        end_date = #{endDate, jdbcType=DATE},
        homepage = #{homepage, jdbcType=VARCHAR}
        WHERE jobPost_id = #{jobPostId, jdbcType=BIGINT}
    </update>



    <delete id="deleteJobPost">
        DELETE FROM jobPost
        WHERE jobPost_id = #{jobPostId}
    </delete>

    <delete id="deleteScrapsByJobPostId">
        DELETE FROM jobSeekerScrap
        WHERE jobPost_id = #{jobPostId}
    </delete>

    <update id="incrementHitCount" parameterType="long">
        UPDATE jobPost
        SET hit_no = hit_no + 1
        WHERE jobPost_id = #{jobPostId}
    </update>

    <select id="selectTop5PopularJobPosts" resultType="com.javalab.board.vo.JobPostVo">
        SELECT *
        FROM jobPost
        WHERE payment_status = 'After Payment'
        ORDER BY hit_no DESC
    </select>

    <select id="selectAllJobPostsForAdmin" resultType="com.javalab.board.vo.JobPostVo">
        SELECT jp.*,
        p.comp_id AS compId,
        p.payment_date AS paymentDate,
        p.amount AS amount
        FROM jobPost jp
        LEFT JOIN payment p ON jp.jobPost_id = p.jobPost_id
        ORDER BY jp.created DESC
    </select>


    <select id="selectJobPostsByFilters" parameterType="map" resultType="com.javalab.board.vo.JobPostVo">
        SELECT * FROM jobPost
        WHERE
        (#{address, jdbcType=VARCHAR} IS NULL OR address = #{address, jdbcType=VARCHAR})
        AND (#{education, jdbcType=VARCHAR} IS NULL OR education = #{education, jdbcType=VARCHAR})
        AND (#{experience, jdbcType=VARCHAR} IS NULL OR experience = #{experience, jdbcType=VARCHAR})
        AND payment_status = 'After Payment'
    </select>




</mapper>